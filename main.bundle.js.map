{"version":3,"sources":["webpack://minskin/./src/index.js"],"names":["backgroundColor","canvas","document","querySelector","spinner","scene","THREE","background","fog","camera","window","innerWidth","innerHeight","position","z","lookAt","renderer","antialias","setPixelRatio","devicePixelRatio","shadowMap","enabled","setSize","ambientLight","add","dl","castShadow","shadow","near","far","set","mapSize","hemLight","head","spotLight","GLTFLoader","load","res","model","traverse","obj","name","y","remove","animate","undefined","error","console","log","planeGeometry","planeMaterial","color","plane","rotation","x","Math","PI","receiveShadow","addEventListener","ev","pos","getCursorPosition","rotJoint","render","clientX","clientY","limitWithinRange","num","min","max","aspect","clientWidth","clientHeight","updateProjectionMatrix","k","anime","requestAnimationFrame","cancelAnimationFrame"],"mappings":"qHAWMA,EAAkB,SAOlBC,EAASC,SAASC,cAAc,UAChCC,EAAUF,SAASC,cAAc,eAGjCE,EAAQ,IAAIC,MAClBD,EAAME,WAAa,IAAID,MAAYN,GACnCK,EAAMG,IAAM,IAAIF,MAAUN,EAAiB,EAAG,IAI9C,IAAMS,EAAS,IAAIH,MAlBP,GAkBoCI,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KAC7FH,EAAOI,SAASC,EAAI,GACpBL,EAAOM,OAAO,EAAG,EAAG,GAGpB,IAAMC,EAAW,IAAIV,MAAoB,CAAEL,SAAQgB,WAAW,IAC9DD,EAASE,cAAcR,OAAOS,kBAC9BH,EAASI,UAAUC,SAAU,EAC7BL,EAASM,QAAQZ,OAAOC,WAAYD,OAAOE,aAAa,GAOxD,IAAMW,EAAe,IAAIjB,MAAmB,SAC5CD,EAAMmB,IAAID,GAGV,IAAME,EAAK,IAAInB,MAnCI,SAmC+B,GAClDmB,EAAGC,YAAa,EAChBD,EAAGE,OAAOlB,OAAOmB,KAAO,GACxBH,EAAGE,OAAOlB,OAAOoB,IAAM,KACvBJ,EAAGZ,SAASiB,IAAI,EAAG,EAAG,GACtBL,EAAGV,OAAO,EAAG,EAAG,GAChBU,EAAGE,OAAOI,QAAU,IAAIzB,MAAc,KAAM,MAC5CD,EAAMmB,IAAIC,GAQV,IAAMO,EAAW,IAAI1B,MAjDA,QAiDoC,QAAU,IAC5C,IAAIA,MAA4B0B,EAAU,GAQjE,IAWIC,EAXEC,EAAY,IAAI5B,MAAgB,SAAU,IAChD4B,EAAUrB,SAASiB,IAAI,EAAG,EAAG,IAC7BzB,EAAMmB,IAAIU,IAQK,IAAIC,KAEZC,KApEc,aAoEK,SAAAC,GACtB,IAAMC,EAAQD,EAAIhC,MAClBiC,EAAMC,UAAS,SAACC,GACZA,EAAId,YAAa,EACA,SAAbc,EAAIC,OAAiBR,EAAOO,MAEpCF,EAAMzB,SAAS6B,GAAK,GACpBrC,EAAMmB,IAAIc,GAEVlC,EAAQuC,SACRC,WACDC,GAAW,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAIrC,IAAMG,EAAgB,IAAI3C,MAAoB,IAAM,IAAM,KACpD4C,EAAgB,IAAI5C,MAAwB,CAAE6C,MArFhC,WAsFdC,EAAQ,IAAI9C,MAAW2C,EAAeC,GAC5CE,EAAMC,SAASC,GAAMC,KAAKC,GAAK,EAC/BJ,EAAMvC,SAAS6B,GAAK,IACpBU,EAAMK,eAAgB,EACtBpD,EAAMmB,IAAI4B,GAGV1C,OAAOgD,iBAAiB,aAAa,SAAAC,GACjC,IAAMC,EAAMC,EAAkBF,GAC9BG,EAASF,GACT5C,EAAS+C,OAAO1D,EAAOI,MAE3B,IAAMoD,EAAoB,SAAAF,GAAE,MAAK,CAC7BL,EAAIK,EAAGK,QAAUtD,OAAOC,WAAc,EAAI,EAC1C+B,GAAMiB,EAAGM,QAAUvD,OAAOE,YAAe,EAAI,IAG3CkD,EAAW,SAAAF,GAEb3B,EAAKoB,SAASX,EAAIwB,EAA4B,EAAVX,KAAKC,GAAWD,KAAKC,GAAK,EAAII,EAAIN,EAAI,EAAG,KAG7ErB,EAAKoB,SAASC,EAAIY,EAA4B,EAAVX,KAAKC,GAAWD,KAAKC,GAAK,EAAII,EAAIlB,EAAI,IAAK,MAG7EwB,EAAmB,SAACC,EAAKC,EAAKC,GAAX,OAAmBd,KAAKa,IAAIb,KAAKc,IAAIF,EAAKC,GAAMC,IAGzE3D,OAAOgD,iBAAiB,UAAU,WAC9BjD,EAAO6D,OAASrE,EAAOsE,YAActE,EAAOuE,aAC5C/D,EAAOgE,yBACPzD,EAAS+C,OAAO1D,EAAOI,MAI3B,IAAIiE,EAAI,IACF9B,EAAU,SAAVA,IACFnC,EAAO6D,OAASrE,EAAOsE,YAActE,EAAOuE,aAC5C/D,EAAOgE,yBAEP,IAAME,EAAQC,sBAAsBhC,GACpC5B,EAAS+C,OAAO1D,EAAOI,GAEnBA,EAAOI,SAASC,EAAI,GAAKoB,EAAUrB,SAASC,EAAI,GAChDL,EAAOI,SAASC,GAAK4D,EACrBxC,EAAUrB,SAASC,GAAK4D,EACxBA,GAAK,KAELG,qBAAqBF,M","file":"main.bundle.js","sourcesContent":["import * as THREE from \"three\";\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n\r\n// // TODO: remvove in production\r\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nimport \"./style.scss\"\r\n\r\n// Variables\r\nconst allowHellpers = false;\r\nconst FOV = 60;\r\nconst backgroundColor = 0xF2F2F2;\r\nconst lightColor = 0xFFFFFF;\r\nconst primaryColor = 0x3399CC;\r\nconst groundColor = 0xE5EAEF;\r\nconst fileLocation = \"/skin.glb\";\r\n\r\n// Nodes\r\nconst canvas = document.querySelector(\"canvas\");\r\nconst spinner = document.querySelector(\"div.spinner\");\r\n\r\n// Scene Setup\r\nconst scene = new THREE.Scene();\r\nscene.background = new THREE.Color(backgroundColor);\r\nscene.fog = new THREE.Fog(backgroundColor, 1, 40);\r\n\r\n\r\n// Camera Setup\r\nconst camera = new THREE.PerspectiveCamera(FOV, window.innerWidth / window.innerHeight, 0.1, 1000);\r\ncamera.position.z = 15;\r\ncamera.lookAt(0, 0, 0)\r\n\r\n// Renderer Setup\r\nconst renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\r\nrenderer.setPixelRatio(window.devicePixelRatio);\r\nrenderer.shadowMap.enabled = true;\r\nrenderer.setSize(window.innerWidth, window.innerHeight, false);\r\n\r\n// // Orbit control \r\n// const controls = new OrbitControls(camera, canvas);\r\n// controls.update();\r\n\r\n// Ambient Light\r\nconst ambientLight = new THREE.AmbientLight(0x404040);\r\nscene.add(ambientLight);\r\n\r\n// Direactional Light\r\nconst dl = new THREE.DirectionalLight(lightColor, 1);\r\ndl.castShadow = true;\r\ndl.shadow.camera.near = 0.1;\r\ndl.shadow.camera.far = 1500;\r\ndl.position.set(4, 5, 4);\r\ndl.lookAt(0, 0, 0);\r\ndl.shadow.mapSize = new THREE.Vector2(1024, 1024);\r\nscene.add(dl);\r\n\r\nif (allowHellpers) {\r\n    const helper = new THREE.DirectionalLightHelper(dl, 5);\r\n    scene.add(helper);\r\n}\r\n\r\n// Hemisphere Light\r\nconst hemLight = new THREE.HemisphereLight(primaryColor, 0x44445b, .1);\r\nconst hemLightHelper = new THREE.HemisphereLightHelper(hemLight, 3);\r\n\r\nif (allowHellpers) {\r\n    scene.add(hemLight);\r\n    scene.add(hemLightHelper);\r\n}\r\n\r\n// Spot Light\r\nconst spotLight = new THREE.SpotLight(0xffffff, 0.6);\r\nspotLight.position.set(0, 0, 16);\r\nscene.add(spotLight);\r\n\r\nif (allowHellpers) {\r\n    const spotLightHelper = new THREE.SpotLightHelper(spotLight);\r\n    scene.add(spotLightHelper);\r\n}\r\n\r\n// Content\r\nconst loader = new GLTFLoader();\r\nlet head;\r\nloader.load(fileLocation, res => {\r\n    const model = res.scene;\r\n    model.traverse((obj) => {\r\n        obj.castShadow = true;\r\n        if (obj.name === \"Head\") head = obj;\r\n    })\r\n    model.position.y = -.5\r\n    scene.add(model);\r\n    // Disable loader\r\n    spinner.remove();\r\n    animate();\r\n}, undefined, (error) => console.log(error));\r\n\r\n\r\n// Ground\r\nconst planeGeometry = new THREE.PlaneGeometry(1000, 1000, 1000);\r\nconst planeMaterial = new THREE.MeshPhongMaterial({ color: groundColor });\r\nconst plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\nplane.rotation.x = - Math.PI / 2;\r\nplane.position.y = -1.5;\r\nplane.receiveShadow = true;\r\nscene.add(plane);\r\n\r\n// Fellow cursor \r\nwindow.addEventListener(\"mousemove\", ev => {\r\n    const pos = getCursorPosition(ev);\r\n    rotJoint(pos)\r\n    renderer.render(scene, camera);\r\n});\r\nconst getCursorPosition = ev => ({\r\n    x: (ev.clientX / window.innerWidth) * 2 - 1,\r\n    y: - (ev.clientY / window.innerHeight) * 2 + 1 \r\n});\r\n\r\nconst rotJoint = pos => {\r\n    // Left Right\r\n    head.rotation.y = limitWithinRange((Math.PI * 2) + (Math.PI / 2 * pos.x), 6, 6.5);\r\n    \r\n    // Top Bottom\r\n    head.rotation.x = limitWithinRange((Math.PI * 2) - (Math.PI / 2 * pos.y), 6.1, 6.4);\r\n};\r\n\r\nconst limitWithinRange = (num, min, max) => Math.min(Math.max(num, min), max);\r\n\r\n// Resizing\r\nwindow.addEventListener(\"resize\", () => {\r\n    camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.render(scene, camera);\r\n});\r\n\r\n// Display\r\nlet k = .05;\r\nconst animate = () => {\r\n    camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n    camera.updateProjectionMatrix();\r\n\r\n    const anime = requestAnimationFrame(animate);\r\n    renderer.render(scene, camera);\r\n\r\n    if (camera.position.z > 4 || spotLight.position.z > 4) {\r\n        camera.position.z -= k;\r\n        spotLight.position.z -= k;\r\n        k += 0.01;\r\n    } else {\r\n        cancelAnimationFrame(anime);\r\n    }\r\n};"],"sourceRoot":""}